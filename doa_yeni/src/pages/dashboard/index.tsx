import Head from "next/head";
import Image from "next/image";
import { GiSpeaker } from "react-icons/gi";
import { getServerSession, type Session } from "next-auth";
import { type GetServerSidePropsContext } from "next";
import { authOptions } from "~/server/auth";
import { DefaultLayout } from "~/components/layout/default";
import { useState } from "react";
import axios from "axios";
import Loading from "./loading";

const aiImages = [
  { id: 0, src: "https://res.cloudinary.com/daa80b8pt/image/upload/v1716460653/WhatsApp_Image_2024-05-23_at_13.36.03_qc7cpj.jpg" },
  { id: 1, src: "https://res.cloudinary.com/daa80b8pt/image/upload/v1716460653/WhatsApp_Image_2024-05-23_at_13.36.03_2_ipepyb.jpg" },
  { id: 2, src: "https://res.cloudinary.com/daa80b8pt/image/upload/v1716460654/WhatsApp_Image_2024-05-23_at_13.36.03_1_hmxvhz.jpg" },
  { id: 3, src: "https://res.cloudinary.com/dvzocaziz/image/upload/v1716562022/woman-6055084_1280_c8cqge.jpg" },
  { id: 4, src: "https://res.cloudinary.com/dvzocaziz/image/upload/v1716811230/Image_from_Artbreeder_jza87j.jpg" },
];

const voices = [
  { id: 0, name: "en-GB-Studio-C", gender :"Female"},
  { id: 1, name: "en-GB-Studio-B", gender :"Male" },
  { id: 2, name: "en-US-Standard-C", gender :"Female" },
  { id: 3, name: "en-US-Standard-D", gender :"Male" },
  { id: 4, name: "tr-TR-Standard-A", gender :"Female" },
  { id: 5, name: "tr-TR-Standard-B", gender :"Male" },
];

export default function Home() {
  const CLOUD_NAME = 'dvzocaziz';
  const [uploading, setUploading] = useState(false);
  const [output, setOutput] = useState(null);
  const [payload, setPayload] = useState({
    text_prompt: "",
    tts_provider: "GOOGLE_TTS",
    google_voice_name: "",
    input_face: "",
    sadtalker_settings: {
      still: false,
      ref_pose: null,
      input_yaw: null,
      input_roll: null,
      pose_style: 0,
      preprocess: "crop",
      input_pitch: null,
      ref_eyeblink: null,
      expression_scale: 1,
    },
    selected_model: "SadTalker",
  });

  async function handleFormSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setUploading(true);
    setOutput(null); 
    try {
      const response = await axios.post("https://api.gooey.ai/v2/LipsyncTTS/", payload, {
        headers: {
          "Authorization": "Bearer " + "sk-3rYESiIv9Jq6i3XWVEgfgulewCL20X1O7Oy1vvwEQiywBs8f",
          "Content-Type": "application/json",
        },
      });
      if (response.data) {
        setOutput(response.data.output.output_video);
      } else {
        console.error("No output video URL found in response", response);
      }
    } catch (error) {
      console.error("Error in API call", error);
    } finally {
      setUploading(false);
    }
  }

  return (
    <>
      <Head>
        <title>Lip Sync</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultLayout>
        <section className="container flex max-w-7xl flex-col items-center gap-12 rounded-lg bg-white px-4 py-6">
          <div className="grid w-full grid-cols-5 gap-14">
            {/* UPLOAD IMAGE AREA START */}
            <div className="col-span-2 flex flex-col items-center justify-evenly">
              {uploading ? (
                <Loading /> // Display loading spinner if uploading
              ) : (
                <>
                  {output && (
                    <video src={output} controls className="rounded-lg max-w-xs"></video>
                  )}
                  {!output && payload.input_face !== '' ? (
                    <img src={payload.input_face} alt="ai image" className="rounded-lg max-w-xs" />
                  ) : !output && (
                    <div className="h-80 w-80 bg-gray-200 rounded-lg flex items-center justify-center">
                      <p className="text-[#02346d]">No Image Selected</p>
                    </div>
                  )}
                  <label className="flex cursor-pointer flex-col gap-2" htmlFor="imageUpload">
                    <input id="imageUpload" type="file" hidden />
                    {payload.input_face === '' && (
                      <div className="rounded-lg bg-[#42438b] px-32 py-2 text-center text-sm text-white">
                        Select Image
                      </div>
                    )}
                  </label>
                  <section className="flex gap-6" style={{ marginTop: '0.5cm' }}>
                    {aiImages.map((img) => (
                      <div
                        key={img.id}
                        className="h-20 w-20 cursor-pointer rounded-lg overflow-hidden"
                        onClick={() => setPayload({ ...payload, input_face: img.src })}
                      >
                        <Image
                          src={img.src}
                          alt="ai image"
                          className="object-cover duration-200 hover:scale-105"
                          width={80}
                          height={90}
                        />
                      </div>
                    ))}
                  </section>
                </>
              )}
            </div>
            {/* UPLOAD IMAGE AREA END */}

            {/* CHOOSE VOICE AREA START */}
            <div className="flex flex-col gap-4">
              <h2 className="text-2xl font-bold">Choose A Voice</h2>
              <ul className="flex flex-col items-start gap-2">
                {voices.map((voice) => (
                  <li
                    key={voice.id}
                    onClick={() => setPayload({ ...payload, google_voice_name: voice.name })}
                    className={`flex cursor-pointer items-center gap-2 rounded-lg p-1 pr-4 duration-200 hover:bg-[#42438b]/10 ${payload.google_voice_name === voice.name ? 'bg-[#42438b]/20' : ''}`}
                  >
                    <GiSpeaker size={24} />
                    <span>{voice.name} ({voice.gender})</span>
                  </li>
                ))}
              </ul>
            </div>
            {/* CHOOSE VOICE AREA END */}

            {/* ENTER PROMPT START */}
            <div className="col-span-2 flex flex-col gap-4">
              <h2 className="text-2xl font-bold">Enter Prompt</h2>
              <form onSubmit={(e) => handleFormSubmit(e)}>
                <textarea
                  className="h-24 w-full rounded-lg border border-gray-300 p-2"
                  placeholder="Enter your prompt here..."
                  value={payload.text_prompt}
                  onChange={(e) => setPayload({ ...payload, text_prompt: e.target.value })}
                ></textarea>
                <button
                  className="rounded-lg bg-[#42438b] px-4 py-2 text-white max-w-xs"
                  type="submit"
                >
                  GENERATE LIP SYNC
                </button>
              </form>
            </div>
            {/* ENTER PROMPT END */}
          </div>
        </section>
      </DefaultLayout>
    </>
  );
}

export const getServerSideProps = async (context: GetServerSidePropsContext) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/auth",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session: JSON.parse(JSON.stringify(session)) as Session,
    },
  };
};
